// Generated by gencpp from file planning/ChouChou.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_CHOUCHOU_H
#define PLANNING_MESSAGE_CHOUCHOU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning
{
template <class ContainerAllocator>
struct ChouChou_
{
  typedef ChouChou_<ContainerAllocator> Type;

  ChouChou_()
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , edge_grad(0.0)
    , status_type()
    , pen_type(0)  {
    }
  ChouChou_(const ContainerAllocator& _alloc)
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , edge_grad(0.0)
    , status_type(_alloc)
    , pen_type(0)  {
  (void)_alloc;
    }



   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_z_type;
  _position_z_type position_z;

   typedef double _edge_grad_type;
  _edge_grad_type edge_grad;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type_type;
  _status_type_type status_type;

   typedef int64_t _pen_type_type;
  _pen_type_type pen_type;





  typedef boost::shared_ptr< ::planning::ChouChou_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::ChouChou_<ContainerAllocator> const> ConstPtr;

}; // struct ChouChou_

typedef ::planning::ChouChou_<std::allocator<void> > ChouChou;

typedef boost::shared_ptr< ::planning::ChouChou > ChouChouPtr;
typedef boost::shared_ptr< ::planning::ChouChou const> ChouChouConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::ChouChou_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::ChouChou_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'planning': ['/home/cc/ee106a/fa19/class/ee106a-agi/ros_workspaces/draw/src/planning/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning::ChouChou_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::ChouChou_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::ChouChou_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::ChouChou_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::ChouChou_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::ChouChou_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::ChouChou_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f61e71bd64cbb15ad5eb3947b804986d";
  }

  static const char* value(const ::planning::ChouChou_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf61e71bd64cbb15aULL;
  static const uint64_t static_value2 = 0xd5eb3947b804986dULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::ChouChou_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/ChouChou";
  }

  static const char* value(const ::planning::ChouChou_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::ChouChou_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position_x\n\
float64 position_y\n\
float64 position_z\n\
float64 edge_grad\n\
string status_type\n\
int64 pen_type\n\
";
  }

  static const char* value(const ::planning::ChouChou_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::ChouChou_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.edge_grad);
      stream.next(m.status_type);
      stream.next(m.pen_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChouChou_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::ChouChou_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::ChouChou_<ContainerAllocator>& v)
  {
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<double>::stream(s, indent + "  ", v.position_z);
    s << indent << "edge_grad: ";
    Printer<double>::stream(s, indent + "  ", v.edge_grad);
    s << indent << "status_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_type);
    s << indent << "pen_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pen_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_CHOUCHOU_H
